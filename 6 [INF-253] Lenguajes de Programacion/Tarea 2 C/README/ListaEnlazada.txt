DOCUMENTACION LISTA ENLAZADA
============================

Esta implementacion de lista enlazada fue hecha en grupo en el ramo de EDD,
y ademas fue adaptada para casos de esta tarea.
El codigo original se encuentra aqui:
https://github.com/moxwel/basics/tree/master/C/11-edd/5-reimplementation/linked_list

Las operaciones de la lista siempre se realizan en el elemento siguiente al cursor.
Un caso especial es cuando el cursor se encuentra justo en el tail; para hacer
la lista mas resiliente, todas las acciones en este caso se realizaran EN el cursor.

Al crear una nueva lista, esta comienza con un nodo especial de cabecera. En
la representacion de lista con 'printList', este nodo especial se considera en la
posicion '-1'. De esta forma, si el cursor esta en el head, en realidad va a
estar manipulando la posicion '0' de la lista.





ESTRCUTURAS
-----------

Se tienen las siguientes estrcuturas:

typedef struct {
    nodo* head;
    nodo* tail;
    nodo* curr;
    int pos;
    int len;
} Cuerpo;

- Cuerpo : Estructura principal de la lista. Desde aqui nacen los punteros a
           los nodos para que sean accesibles.
    - head : Puntero que apunta al nodo cabeza, es decir, al inicio de la lista.
    - tail : Puntero que apunta al nodo cola, es decir, al final de la lista.
    - curr : Puntero cursor que apunta al nodo actual.
    - pos : int que denota la posicion actual del cursor.
    - len : int que denota el tamaño de la lista, es decir, la cantidad de
            elementos guardados.

----------

typedef struct ListNode{
    tListElem info;
    char tipo;
    struct ListNode *sig;
} nodo;

- nodo : Nodo de la lista. Estos nodos estaran conectados entre si mediante punteros.
    - info : Alberga un elemento de tipo tListElem (caracteristica del Transimperativer).
    - tipo : Contiene un caracter que define el tipo de 'info'.
        - 'i' (105) : int
        - 'c' (99)  : char
        - 'h' (104) : char* (arreglo de char)
        - 'a' (97)  : int* (arreglo de int)
    - sig : Un puntero que apunta a otro nodo, quien es siguiente en la lista.

----------

typedef void* tListElem;

- tListElem : Los elementos de la lista seran punteros a void.





FUNCIONES
---------

Operaciones de inicializacion:

- newList : Crea una nueva lista. Retorna una direccion de memoria donde la
            lista esta ubicada. Esta debe ser asignada a una variable de tipo Cuerpo*.
            Retorno: Puntero a un tList en memoria.

- deleteList : Elimina una lista completa y libera su memoria. Deberia usarse en
               todas las listas que se hayan creado en el progama, antes de que
               éste termine para evitar fugas de memoria.
               Params: Cuerpo*



Operaciones de elemento:

- insert : Agrega un elemento despues del cursor. El elemento a agregar debe ser
           un puntero a void, con su respectivo caracter de tipo.
           Params: Cuerpo*, char, void*

- append : Agrega un elemento al final de la lista. El elemento a agregar debe ser
           un puntero a void, con su respectivo caracter de tipo.
           Params: Cuerpo*, char, void*

- erase : Elimina el elemento despues del cursor, liberando la celda 'info'.
          Params: Cuerpo*
          Retorno: 1 = Exito; 0 = Sin exito (lista vacia)

- removeNode : Elimina el elemento despues del cursor, sin liberar la celda 'info'.
               Params: Cuerpo*
               Retorno: 1 = Exito; 0 = Sin exito (lista vacia)

               NOTA: Es recomendable utilizar esta funcion en vez de 'erase()' para
               manipular los nodos de los Transimperativer, de esta forma, se evita
               el Dangling.
               Para eliminar los Transimperativer, ahi si se debe utilizar 'erase()'
               para liberar la memoria.

- clearList : Elimina todos los elementos de la lista.
              Params: Cuerpo*



Operaciones de cursor:

- next : Mueve el cursor un elemento hacia adelante.
         Params: Cuerpo*
         Retorno: 1 = Exito; 0 = Sin exito (cursor en tail)

- prev : Mueve el cursor un elemento hacia atras.
         Params: Cuerpo*
         Retorno: 1 = Exito; 0 = Sin exito (cursor en head)

- moveToPos : Mueve el cursor a una posicion especificada.
              Params: Cuerpo*, int
              Retorno: 1 = Exito; 0 = Sin exito (posicion invalida)

- moveToStart : Mueve el cursor al inicio de la lista.
                Params: Cuerpo*

- moveToEnd : Mueve el cursor al final de la lista.
              Params: Cuerpo*



Operaciones de obtencion:

- getValue : Obtiene el valor del elemento siguiente al cursor.
             Params: Cuerpo*
             Retorno: Valor de tipo union dataInfo.

             NOTA: Se debe acceder a la celda de la union segun sea el tipo del
             elemento. Se recomienda usar en conjunto con 'getType()'.

- getType : Obtiene el tipo del elemento siguiente al cursor.
            Params: Cuerpo*
            Retorno: char (correspondiente al tipo)

- getInfoPointer : Obtiene el puntero contenido en 'info' del elemento siguiente
                   al cursor.
                   Params: Cuerpo*
                   Retorno: void*

                   NOTA: A diferencia de 'getValue()', esta funcion obtiene el
                   valor De Facto que posee la celda 'info'.

- getLength : Obtiene el tamaño de la lsita.
              Retorno: int

- getPos : Obtiene la posicion del cursor.
           Retorno: int

- printValue : Imprime con formato para ver el contenido que tiene el elemento
               siguiente al cursor.
               Params: Cuerpo*

- printList : Imprime con formato para ver toda la lista completa.
              Params: Cuerpo*

              NOTA: A diferencia de 'printValue()', esta funcion retorna toda la
              lista, pero no desreferencia los punteros, sino que se ven tal cual
              como existen. Para poder ver el contenido, se debe utilizar 'printValue()'.





FORMATO DE DEPURACION
---------------------

Al utilizar 'printList()', se va a imprimir la siguiente informacion:

        -----LIST-----
        Len: 6 - Pos: 0
        [-1  ][i] (nil)          | H | C
        [0   ][a] 0x7fffc90e8d70
        [1   ][i] 0x7fffc90e8d14
        [2   ][c] 0x7fffc90e8d12
        [3   ][i] 0x7fffc90e8d18
        [4   ][i] 0x7fffc90e8d1c
        [5   ][h] 0x7fffc90e8d90 | T
        ==============

Donde el 'Len' y 'Pos' representan el largo de la lista, y la posicion del cursor
respectivamente.

El formato de cada celda es el siguiente:

        [<indice>][<tipo>] <puntero almacenado> | <flags de lista>

Los 'flags de lista' pueden ser H, C, y T para referirse a la ubicacion del Head,
del Cursor, y del Tail respectivamente.

----------

Al utilizar 'printValue()', se va a imprimir la siguiente informacion:

        [0   ][a] Arreglo de Int  | Size: 5 = [ 21, 321, 1432, 3214, 43214 ] = Avrg: 9641

El formato es el siguiente:

        [<indice>][<tipo>] <tipo> | <caracteristica>

Dependiendo del tipo, la representacion de las caracteristicas puede diferir.
Para los ints, solo muestra el numero, para los char, muestra la letra y su valor
en ASCII, para los arreglos (de int y char), muestra el tamaño del arreglo,
el contenido de esta, y el valor promedidado obtenido de este.
